import numpy as np
import pytest
from bayesian import StateGenerator, sample_observation, belief_update, belief_predict, initialize_belief

class TestBayesianInference:

    @pytest.mark.parametrize("initial_state,observation_list,prior_style", [
        (
            ([(3, 4), (6, 4), (3, 7), (5, 1), (0, 3), (1, 0), (2, 5), (5, 5), (1, 3), (4, 7)], (8, 7)),
            [(3,4)], "uniform",
        ),
        (
            ([(3, 4), (6, 4), (3, 7), (5, 1), (0, 3), (1, 0), (2, 5), (5, 5), (1, 3), (4, 7)], (8, 7)),
            [(3,4),(3,4)], "uniform",
        ),
        (
            ([(3, 4), (6, 4), (3, 7), (5, 1), (0, 3), (1, 0), (2, 5), (5, 5), (1, 3), (4, 7)], (8, 7)),
            [(3,4),(3,5)], "uniform",
        ),
        (
            ([(3, 4), (6, 4), (3, 7), (5, 1), (0, 3), (1, 0), (2, 5), (5, 5), (1, 3), (4, 7)], (8, 7)),
            [(3,5),(3,3),(3,4)], "uniform",
        ),
        (
            ([(3, 4), (6, 4), (3, 7), (5, 1), (0, 3), (1, 0), (2, 5), (5, 5), (1, 3), (4, 7)], (8, 7)),
            [(3,4)], "dirac",
        ),
        (
            ([(3, 4), (6, 4), (3, 7), (5, 1), (0, 3), (1, 0), (2, 5), (5, 5), (1, 3), (4, 7)], (8, 7)),
            [(3,4),(3,4)], "dirac",
        ),
        (
            ([(3, 4), (6, 4), (3, 7), (5, 1), (0, 3), (1, 0), (2, 5), (5, 5), (1, 3), (4, 7)], (8, 7)),
            [(3,4),(3,5)], "dirac",
        ),
        (
            ([(3, 4), (6, 4), (3, 7), (5, 1), (0, 3), (1, 0), (2, 5), (5, 5), (1, 3), (4, 7)], (8, 7)),
            [(3,5),(3,3),(3,4)], "dirac",
        ),
    ])
    def test_example_obserations(self, initial_state, observation_list,prior_style):
        """
        This test represents some sample test cases for you to test your Bayesian update;
        you should implement the tests here. Feel free to add additional parameters.
        """
        pass

    @pytest.mark.parametrize("initial_state,action_list,prior_style", [
        (
            ([(3, 4), (6, 4), (3, 7), (5, 1), (0, 3), (1, 0), (2, 5), (5, 5), (1, 3), (4, 7)], (8, 7)),
            [(0,0)], "uniform",
        ),
        (
            ([(3, 4), (6, 4), (3, 7), (5, 1), (0, 3), (1, 0), (2, 5), (5, 5), (1, 3), (4, 7)], (8, 7)),
            [(0,0),(0,1)], "uniform",
        ),
        (
            ([(3, 4), (6, 4), (3, 7), (5, 1), (0, 3), (1, 0), (2, 5), (5, 5), (1, 3), (4, 7)], (8, 7)),
            [(1,0),(0,0)], "uniform",
        ),
        (
            ([(3, 4), (6, 4), (3, 7), (5, 1), (0, 3), (1, 0), (2, 5), (5, 5), (1, 3), (4, 7)], (8, 7)),
            [(0,0),(1,0),(-1,0)], "uniform",
        ),
        (
            ([(3, 4), (6, 4), (3, 7), (5, 1), (0, 3), (1, 0), (2, 5), (5, 5), (1, 3), (4, 7)], (8, 7)),
            [(0,0)], "dirac",
        ),
        (
            ([(3, 4), (6, 4), (3, 7), (5, 1), (0, 3), (1, 0), (2, 5), (5, 5), (1, 3), (4, 7)], (8, 7)),
            [(0,0),(0,1)], "dirac",
        ),
        (
            ([(3, 4), (6, 4), (3, 7), (5, 1), (0, 3), (1, 0), (2, 5), (5, 5), (1, 3), (4, 7)], (8, 7)),
            [(1,0),(0,0)], "dirac",
        ),
        (
            ([(3, 4), (6, 4), (3, 7), (5, 1), (0, 3), (1, 0), (2, 5), (5, 5), (1, 3), (4, 7)], (8, 7)),
            [(0,0),(1,0),(-1,0)], "dirac",
        ),
    ])
    def test_example_actions(self, initial_state, action_list,prior_style):
        pass
     
